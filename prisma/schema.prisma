// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  title        String    @db.VarChar(255)
  description      String?   @db.Text
  published    Publicity @default(Public)
  author       User      @relation(fields: [authorId], references: [id])
  authorId     String
  likes        Like[]
  comments     Comment[]
  partners     ProjectPartners[]
  thubmnailUrl String?
  githubUrl    String?
  demoUrl      String?

  @@unique([authorId, title])
  @@unique([authorId, githubUrl])
  @@unique([authorId, demoUrl])
  @@unique([authorId, githubUrl, demoUrl])

}

model ProjectPartners{
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Publicity {
  Public
  Friends
  Private
}

model Like {
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  likedAt   DateTime @default(now())
  hasLiked  Boolean  @default(true)

  @@unique([projectId, userId])
}

model Connection {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation("user", fields: [userId], references: [id])
  userId        String
  connectedTo   User     @relation("connectedTo", fields: [connectedToId], references: [id])
  connectedToId String
  accepted      Boolean  @default(false)

  @@unique([userId, connectedToId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String?  @db.Text
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}

model Profile {
  id          String @id @default(cuid())
  bio         String
  gender      Gender
  nationality String
  city        String
  user        User   @relation(fields: [userId], references: [id])
  userId      String @unique
}

enum Gender {
  Male
  Female
  Other
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String       @id @default(cuid())
  email           String       @unique
  username        String       @unique
  firstName       String
  lastName        String
  image           String?
  password        String
  createdAt       DateTime     @default(now())
  projects        Project[]
  profile         Profile?
  sessions        Session[]
  likes           Like[]
  comments        Comment[]
  connectionsUser Connection[] @relation("user")
  connectionsTo   Connection[] @relation("connectedTo")
  partners        ProjectPartners[]
}
